某些场景下，我们需要代码只被执行一次，比如单例类的初始化，考虑到多线程安全，需要进行加锁控制。
C++11中提供的call_once可以很好的满足这种需求，使用又非常简单。

#include <iostream>
#include <thread>
#include <chrono>
#include <mutex>

int winner;
void set_winner(int x){winner = x;}
std::once_flag winner_flag;

void wait_1000ms(int id){
  for(int i=0;i<1000;++i){
    std::this_thread::sleep_for(std::chrono::milliseconds(1));
    std::call_once (winner_flag, set_winner, id);
  }
}

int main(){
  std::thread threads[10];
  for(int i=0;i<10;++i){
    threads[i] = std::thread(wait_1000ms, i+1);
  }
  
  std::cout<<"waiting for the firsh among 10 threads to count 1000ms...\n";
  for(auto&th: threads) th.join();
  std::cout<<"winner thread: "<< winner<< '\n';
  
  return 0;
}
