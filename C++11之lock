std::lock
定义在<mutex>中。
template<class Lockable1, class Lockable2, class... LockableN>
void lock(Lockable1& lock1, Locakable2& lock2, LockableN&... lockn);

使用死锁避免算法来Lock给定的Lockable的对象lock1，lock2，...，lockn，以防止死锁。

以一种不确定的调用顺序来调用lock, try_lock, unlock，以锁定lock1，lock2，...，lockn. 如果对lock或unlock的调用导致了异常，那么对于任何已经被lock住的对象，在异常被再次抛出前，unlock将被调用。


// std::lock example
#include <iostream>       // std::cout
#include <thread>         // std::thread
#include <mutex>          // std::mutex, std::lock

std::mutex foo,bar;

void task_a () {
  // foo.lock(); bar.lock(); // replaced by:
  std::lock (foo,bar);
  std::cout << "task a\n";
  foo.unlock();
  bar.unlock();
}

void task_b () {
  // bar.lock(); foo.lock(); // replaced by:
  std::lock (bar,foo);
  std::cout << "task b\n";
  bar.unlock();
  foo.unlock();
}

int main ()
{
  std::thread th1 (task_a);
  std::thread th2 (task_b);

  th1.join();
  th2.join();

  return 0;
}
